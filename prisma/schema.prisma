generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sellers {
  id        String              @id @default(uuid())
  name      String
  login     String              @unique
  phone     String              @unique
  password  String
  role      UsersRole           @default(SELLER)
  PINcode   Int
  createdAt DateTime            @default(now())
  email     String              @unique
  balance   Int? @default(0)
  image     String? @default("")
  
  chats Chat[]
  debters   Debters[]
  debts   Debt[]
  exampleMessages ExampleMessages[]
}



model Debters {
  id        String              @id @default(uuid())
  name      String
  phone     String
  sellerId  String
  star Boolean? @default(false)
  adress String?

  seller    Sellers             @relation(fields: [sellerId], references: [id])
  debts     Debt[]             
  chats     Chat[]
  images    ImagesOfDebters[]
}



model Debt {
  id               String        @id @default(uuid())
  name             String
  term             Int? 
  remainingMonths  Int?
  description      String?
  status           DebtsStatus   @default(NOT_PAID)
  createdAt        DateTime      @default(now())
  startingTime     DateTime      @default(now())
  summaryAmount    Int           @default(0)
  remainingAmount  Int           @default(0)
  monthlyPayment   Int           @default(0)
  sellerId         String?
  debterId         String   ?     
  nextPaymentDay   DateTime?

  seller           Sellers?      @relation(fields: [sellerId], references: [id])
  debter           Debters     ?  @relation(fields: [debterId], references: [id])
  payments         Payments[]
  images           ImagesOfDebts[]
}



model Admin {
  id       String     @id @default(uuid())
  username String     @unique
  password String
  phone    String
  role     UsersRole  @default(ADMIN)
}

model Chat {
  id        String        @id @default(uuid())
  debterId  String
  sellerId String
  createdAt DateTime @default(now())
  debter    Debters       @relation(fields: [debterId], references: [id])
  sellers    Sellers       @relation(fields: [sellerId], references: [id])
  messages Messages[]
}

model Messages {
  id String @id @default(uuid())
  debterId String 
  createdAt DateTime @default(now())
  chatId String 
  message String
  chats Chat @relation(fields: [chatId], references: [id])
  status MessageStatus @default(SEND)
}

model Payments {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  debtId    String
  month     Int
  amount Int ?
  debt      Debt      @relation(fields: [debtId], references: [id])
}

model ExampleMessages {
  id      String    @id @default(uuid())
  text    String
  status Boolean? @default(true)

  sellerId String
  seller   Sellers   @relation(fields: [sellerId], references: [id])
}

model ImagesOfDebters {
  id        String      @id @default(uuid())
  image     String

  debterId  String
  debter    Debters     @relation(fields: [debterId], references: [id])
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String
}

model ImagesOfDebts {
  id      String @id @default(uuid())
  image   String[]
  debtId  String

  debt    Debt   @relation(fields: [debtId], references: [id])
}

model Terms {
  id      String @id @default(uuid())
  term String
}

model Region {
  id      String @id @default(uuid())
  name String
}

enum UsersRole {
  ADMIN
  SUPER_ADMIN
  SELLER
  DEBTER
}


enum MessageStatus {
  SEND
  NOT_SEND
  SENDING
}

enum DebtsStatus {
  NOT_PAID
  PAID
}
